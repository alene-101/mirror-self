# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CO8o9xmOMoUyBxTc9qhjeDQaxKV_Vk14
"""

!pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client dateparser openai

from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import torch

model_name = "microsoft/Phi-3-mini-4k-instruct"

print("Loading Microsoft Phi-3-mini model...")
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,
    device_map="auto"
)

chatbot = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_new_tokens=512,
    temperature=0.7,
    top_p=0.9
)

print("Microsoft Phi-3-mini loaded successfully!")

system_prompt = """
You are GoalCoach — a helpful and motivating assistant that helps users turn big goals into a clear, dated action plan.

Your tasks:
1. Ask the user for their main long-term goal.
2. Ask for their target completion time and available study/work hours per week.
3. Split the big goal into 3–6 smaller weekly goals.
4. Each goal **must include a due date** in ISO format: YYYY-MM-DD.
   Example: "Goal 1: Finish basic Python — 2025-10-12"
5. Keep responses clear, friendly, and motivational.
6. When the user types 'create calendar', prepare all goals for Google Calendar.

Output each goal on a new line, like:
Goal 1: <task> — YYYY-MM-DD
"""

def ask_goalcoach(user_input):
    prompt = f"{system_prompt}\nUser: {user_input}\nAssistant:"
    result = chatbot(prompt)[0]['generated_text']
    response = result.split("Assistant:")[-1].strip()
    print("\nGoalCoach:\n")
    print(response)
    return response

from google.colab import files
uploaded = files.upload()

from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import pickle, os

SCOPES = ["https://www.googleapis.com/auth/calendar"]
creds_path = "credentials.json"
token_path = "token.pkl"

if os.path.exists(token_path):
    with open(token_path, "rb") as token:
        creds = pickle.load(token)
else:
    flow = InstalledAppFlow.from_client_secrets_file(creds_path, SCOPES)
    auth_url, _ = flow.authorization_url(prompt="consent")
    print("Go to this link, authorize, then paste the code below:")
    print(auth_url)
    code = input("Paste authorization code here: ")
    flow.fetch_token(code=code)
    creds = flow.credentials
    with open(token_path, "wb") as token:
        pickle.dump(creds, token)

service = build("calendar", "v3", credentials=creds)
print("Connected to Google Calendar successfully!")

import re
from datetime import datetime

def add_goals_to_calendar(goal_text):
    goals = re.findall(r"Goal\s*\d+:\s*(.*?)\s*—\s*(\d{4}-\d{2}-\d{2})", goal_text)
    if not goals:
        print("No valid goals found. Make sure each goal has 'YYYY-MM-DD'.")
        return

    for task, date_str in goals:
        start_time = f"{date_str}T09:00:00+07:00"
        end_time = f"{date_str}T10:00:00+07:00"

        event = {
            'summary': task.strip(),
            'start': {'dateTime': start_time},
            'end': {'dateTime': end_time},
        }

        try:
            service.events().insert(calendarId='primary', body=event).execute()
            print(f"Added to calendar: {task} ({date_str})")
        except Exception as e:
            print(f"Error adding {task}: {e}")

    print("\nAll goals have been added to Google Calendar successfully!")

user_goal = input("What is your main goal? ")
goal_plan = ask_goalcoach(user_goal)

confirm = input("\nAdd these goals to your Google Calendar? (yes/no): ").strip().lower()
if confirm == "yes":
    add_goals_to_calendar(goal_plan)
else:
    print("Goals not added.")